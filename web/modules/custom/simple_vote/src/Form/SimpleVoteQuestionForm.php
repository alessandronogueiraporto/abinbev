<?php

namespace Drupal\simple_vote\Form;

use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Form\FormStateInterface;
use Drupal\simple_vote\Entity\SimpleVoteAnswer;

/**
 * Form controller for the SimpleVoteQuestion entity edit forms.
 */
class SimpleVoteQuestionForm extends ContentEntityForm {

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    $form = parent::buildForm($form, $form_state);

    /**
     * Machine name autogenerated if new.
     */
    if ($this->entity->isNew()) {
      $machine_name = 'question_' . substr(md5(\Drupal::service('uuid')->generate()), 0, 8);
      $form['machine_name']['widget'][0]['value']['#default_value'] = $machine_name;
    }

    /**
     * Machine name read-only.
     */
    $form['machine_name']['widget'][0]['value']['#attributes']['readonly'] = 'readonly';
    $form['machine_name']['widget'][0]['value']['#attributes']['disabled'] = 'disabled';

    /**
     * Field to publish/unpublish the question.
     */
    $form['status'] = [
      '#type' => 'checkbox',
      '#title' => $this->t('Published'),
      '#default_value' => $this->entity->isNew() ? 1 : $this->entity->get('status')->value,
      '#description' => $this->t('Check to activate the question.'),
    ];

    /**
     * Answers: load from form state or entity.
     */
    if (!$form_state->has('answers')) {
      $answers = [];
      if (!$this->entity->isNew()) {
        $answer_ids = \Drupal::entityQuery('simple_vote_answer')
          ->accessCheck(TRUE)
          ->condition('question_id', $this->entity->id())
          ->execute();
        if (!empty($answer_ids)) {
          $answers = \Drupal::entityTypeManager()
            ->getStorage('simple_vote_answer')
            ->loadMultiple($answer_ids);
        }
      }

      /**
       * Guarantees at least one response.
       */
      if (empty($answers)) {
        $answers[] = SimpleVoteAnswer::create([]);
      }

      $form_state->set('answers', array_values($answers));
    }

    $answers = $form_state->get('answers');

    $form['answers'] = [
      '#type' => 'fieldset',
      '#title' => $this->t('Answers'),
      '#prefix' => '<div id="answers-wrapper">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    ];

    foreach ($answers as $i => $answer) {
      $form['answers'][$i] = [
        '#type' => 'details',
        '#title' => $this->t('Response @n', ['@n' => $i + 1]),
        '#attributes' => ['class' => ['simple-vote-answer']],
      ];

      $form['answers'][$i]['title'] = [
        '#type' => 'textfield',
        '#title' => $this->t('Answer title'),
        '#default_value' => $answer->get('title')->value ?? '',
        '#maxlength' => 255,
        '#required' => TRUE,
      ];

      $form['answers'][$i]['description'] = [
        '#type' => 'textarea',
        '#title' => $this->t('Brief description'),
        '#default_value' => $answer->get('description')->value ?? '',
        '#maxlength' => 300,
        '#rows' => 3,
      ];

      $form['answers'][$i]['image'] = [
        '#type' => 'managed_file',
        '#title' => $this->t('Response image'),
        '#upload_location' => 'public://simple_vote_answers/',
        '#default_value' => $answer->get('image')->target_id ? [$answer->get('image')->target_id] : NULL,
        '#description' => $this->t('Allowed formats: jpg, jpeg, png, svg'),
        '#multiple' => FALSE,
      ];

      $form['answers'][$i]['answer_id'] = [
        '#type' => 'hidden',
        '#value' => $answer->id() ?? '',
      ];

     /**
      * Remove reply button.
      */
      $form['answers'][$i]['remove'] = [
        '#type' => 'submit',
        '#value' => $this->t('Remove'),
        '#name' => 'remove_' . $i,
        '#submit' => ['::removeAnswer'],
        '#limit_validation_errors' => [],
        '#ajax' => [
          'callback' => '::ajaxCallback',
          'wrapper' => 'answers-wrapper',
        ],
        '#access' => count($answers) > 1, // Só mostra se há mais de uma resposta
      ];
    }

    /**
     * Add reply button.
     */
    $form['answers']['add_answer'] = [
      '#type' => 'submit',
      '#value' => $this->t('Add new response'),
      '#submit' => ['::addOne'],
      '#limit_validation_errors' => [],
      '#ajax' => [
        'callback' => '::ajaxCallback',
        'wrapper' => 'answers-wrapper',
      ],
    ];

    return $form;
  }

  /**
   * AJAX callback for wrapper update.
   */
  public function ajaxCallback(array &$form, FormStateInterface $form_state) {
    return $form['answers'];
  }

  /**
   * Handler for adding new response.
   */
  public function addOne(array &$form, FormStateInterface $form_state) {
    $answers = $form_state->get('answers');
    $answers[] = SimpleVoteAnswer::create([]);
    $form_state->set('answers', array_values($answers));
    $form_state->setRebuild();
  }

  /**
   * Handler to remove a response.
   */
  public function removeAnswer(array &$form, FormStateInterface $form_state) {
    $trigger = $form_state->getTriggeringElement()['#name'];
    $index = (int) str_replace('remove_', '', $trigger);
    $answers = $form_state->get('answers');

    if (isset($answers[$index])) {
      unset($answers[$index]);
    }

    /**
     * Guarantees at least one response.
     */
    if (empty($answers)) {
      $answers[] = SimpleVoteAnswer::create([]);
    }

    $form_state->set('answers', array_values($answers));
    $form_state->setRebuild();
  }

  /**
   * {@inheritdoc}
   */
  public function save(array $form, FormStateInterface $form_state) {
    if ($this->entity->isNew() && empty($this->entity->get('machine_name')->value)) {
      $prefix = 'question_';
      $unique_hash = substr(md5(\Drupal::service('uuid')->generate()), 0, 8);
      $this->entity->set('machine_name', $prefix . $unique_hash);
    }

    /**
     * Saves question status (published/unpublished).
     */
    $this->entity->set('status', $form_state->getValue('status') ? 1 : 0);

    $status = parent::save($form, $form_state);
    $values = $form_state->getValue('answers');
    $answer_storage = \Drupal::entityTypeManager()->getStorage('simple_vote_answer');
    $saved_ids = [];

    foreach ($values as $entry) {
      $title = trim($entry['title']);
      if (empty($title)) {
        continue;
      }

      $answer = NULL;
      if (!empty($entry['answer_id'])) {
        $answer = $answer_storage->load($entry['answer_id']);
      }

      if (!$answer) {
        $answer = SimpleVoteAnswer::create([]);
      }

      $answer->set('title', $title);
      $answer->set('description', trim($entry['description']));
      if (!empty($entry['image'][0])) {
        $answer->set('image', ['target_id' => $entry['image'][0]]);
      }
      $answer->set('question_id', $this->entity->id());
      $answer->save();

      $saved_ids[] = $answer->id();
    }

    /**
     * Remove unsaved.
     */
    $query = $answer_storage->getQuery()
      ->accessCheck(FALSE)
      ->condition('question_id', $this->entity->id());
    if (!empty($saved_ids)) {
      $query->condition('id', $saved_ids, 'NOT IN');
    }
    $to_delete = $query->execute();
    if (!empty($to_delete)) {
      $answer_storage->delete($answer_storage->loadMultiple($to_delete));
    }

    $msg = $status === SAVED_NEW ? 'criada' : 'atualizada';
    $this->messenger()->addStatus($this->t('Pergunta %label foi @msg com sucesso.', [
      '%label' => $this->entity->label(),
      '@msg' => $msg,
    ]));

    $form_state->setRedirect('simple_vote_question.collection');
    return $status;
  }
}
